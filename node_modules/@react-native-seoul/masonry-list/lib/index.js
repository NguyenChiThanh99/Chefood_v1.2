import { RefreshControl, ScrollView, View, } from 'react-native';
import React, { useState } from 'react';
var isCloseToBottom = function (_a, onEndReachedThreshold) {
    var layoutMeasurement = _a.layoutMeasurement, contentOffset = _a.contentOffset, contentSize = _a.contentSize;
    var paddingToBottom = contentSize.height * onEndReachedThreshold;
    return (layoutMeasurement.height + contentOffset.y >=
        contentSize.height - paddingToBottom);
};
function MasonryList(props) {
    var _a = useState(false), isRefreshing = _a[0], setIsRefreshing = _a[1];
    var keyPrefix = props.keyPrefix, refreshing = props.refreshing, data = props.data, ListHeaderComponent = props.ListHeaderComponent, ListEmptyComponent = props.ListEmptyComponent, ListFooterComponent = props.ListFooterComponent, renderItem = props.renderItem, onEndReachedThreshold = props.onEndReachedThreshold, onEndReached = props.onEndReached, onRefresh = props.onRefresh, loading = props.loading, LoadingView = props.LoadingView, _b = props.numColumns, numColumns = _b === void 0 ? 2 : _b, style = props.style;
    return (<ScrollView {...props} style={[{ alignSelf: 'stretch' }, style]} removeClippedSubviews={true} refreshControl={<RefreshControl refreshing={!!(refreshing && isRefreshing)} onRefresh={function () {
                setIsRefreshing(true);
                onRefresh === null || onRefresh === void 0 ? void 0 : onRefresh();
                setIsRefreshing(false);
            }}/>} scrollEventThrottle={16} onScroll={function (_a) {
            var nativeEvent = _a.nativeEvent;
            if (isCloseToBottom(nativeEvent, onEndReachedThreshold || 0.1))
                onEndReached === null || onEndReached === void 0 ? void 0 : onEndReached();
        }}>
      {ListHeaderComponent}
      {data.length === 0 && ListEmptyComponent ? (React.isValidElement(ListEmptyComponent) ? (ListEmptyComponent) : (<ListEmptyComponent />)) : (<View style={{ flex: 1, flexDirection: 'row' }}>
          {Array.from(Array(numColumns), function (_, num) {
                return (<View key={keyPrefix + "-" + num.toString()} style={{ flex: 1 / numColumns }}>
                {data
                        .map(function (el, i) {
                        if (i % numColumns === num)
                            return renderItem({ item: el, i: i });
                        return null;
                    })
                        .filter(function (e) { return !!e; })}
              </View>);
            })}
        </View>)}
      {loading && LoadingView}
      {ListFooterComponent}
    </ScrollView>);
}
export default MasonryList;
